# generated by datamodel-codegen:
#   filename:  https://dev.melaniebot.gg/openapi.json
#   timestamp: 2022-10-20T18:45:47+00:00

from __future__ import annotations
import humanize,discord
from enum import Enum
from typing import Any, Dict, List, Optional, Union
color=0xD6BCD0
from pydantic import AnyUrl, BaseModel, Field


class APIAuditEvent(BaseModel):
    method: Optional[str] = Field(None, title='Method')
    duration: Optional[float] = Field(None, title='Duration')
    time: Optional[float] = Field(None, title='Time')
    ts: Optional[str] = Field(None, title='Ts')
    path: Optional[str] = Field(None, title='Path')
    url: Optional[str] = Field(None, title='Url')


class APIBioRequest(BaseModel):
    user_id: int = Field(..., title='User Id')
    requesting_user_id: int = Field(..., title='Requesting User Id')
    guild_id: Optional[int] = Field(None, title='Guild Id')
    sig: Optional[str] = Field(None, title='Sig')


class ActivityAsset(BaseModel):
    small_text: Optional[str] = Field(None, title='Small Text')
    large_text: Optional[str] = Field(None, title='Large Text')
    small_image: Optional[str] = Field(None, title='Small Image')
    large_image: Optional[str] = Field(None, title='Large Image')


class BioRequest(BaseModel):
    user_id: int = Field(..., title='User Id')
    guild_id: Optional[int] = Field(None, title='Guild Id')
    sig: Optional[str] = Field(None, title='Sig')
    req_user_id: Optional[int] = Field(None, title='Req User Id')
    timestamp: Optional[int] = Field(None, title='Timestamp')


class ChatModelResponse(BaseModel):
    processing_time: Optional[float] = Field(None, title='Processing Time')
    beam_texts: Optional[List[List[Union[float, str]]]] = Field(
        None, title='Beam Texts'
    )
    episode_done: Optional[bool] = Field(None, title='Episode Done')
    id: Optional[str] = Field(None, title='Id')
    text: Optional[str] = Field(None, title='Text')


class ChatRequestMessage(BaseModel):
    message: str = Field(..., title='Message')
    session_id: str = Field(..., title='Session Id')


class ChatSearchRequest(BaseModel):
    q: str = Field(..., title='Q')
    n: int = Field(..., title='N')


class ChatSessionStartResponse(BaseModel):
    session_id: str = Field(..., title='Session Id')
    created_at: Optional[int] = Field(1666275874.056535, title='Created At')


class ChorusInfo(BaseModel):
    start_ms: Optional[int] = Field(None, title='Start Ms')
    duration_ms: Optional[int] = Field(None, title='Duration Ms')


class Color(BaseModel):
    hex: Optional[str] = Field(None, title='Hex')
    rgb: Optional[List[int]] = Field(None, title='Rgb')
    decimal: Optional[int] = Field(None, title='Decimal')


class ColorLookup(BaseModel):
    dominant: Color
    palette: Optional[Any] = Field(None, title='Palette')


class CommerceInfo(BaseModel):
    auction_ad_invited: Optional[bool] = Field(None, title='Auction Ad Invited')
    with_comment_filter_words: Optional[bool] = Field(
        None, title='With Comment Filter Words'
    )
    adv_promotable: Optional[bool] = Field(None, title='Adv Promotable')


class ConnectedAccount(BaseModel):
    type: Optional[str] = Field(None, title='Type')
    id: Optional[str] = Field(None, title='Id')
    name: Optional[str] = Field(None, title='Name')
    verified: Optional[bool] = Field(None, title='Verified')


class DetectLanguageRequest(BaseModel):
    text: str = Field(..., title='Text')


class DetectLanguageResponse(BaseModel):
    language: str = Field(..., title='Language')
    score: float = Field(..., title='Score')


class DownloaderOptions(BaseModel):
    http_chunk_size: Optional[int] = Field(None, title='Http Chunk Size')


class DownloaderOptions1(BaseModel):
    http_chunk_size: Optional[int] = Field(None, title='Http Chunk Size')


class Fragment(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    duration: Optional[float] = Field(None, title='Duration')


class GatewayUserStatus(BaseModel):
    primary: Optional[str] = Field(None, title='Primary')
    desktop: Optional[str] = Field(None, title='Desktop')
    mobile: Optional[str] = Field(None, title='Mobile')
    web: Optional[str] = Field(None, title='Web')


class GroupIdList(BaseModel):
    GroupdIdList0: Optional[Any] = Field(None, title='Groupdidlist0')
    GroupdIdList1: Optional[List[int]] = Field(None, title='Groupdidlist1')


class Guild(BaseModel):
    afk_timeout: Optional[int] = Field(None, title='Afk Timeout')
    banner: Optional[str] = Field(None, title='Banner')
    default_message_notifications: Optional[int] = Field(
        None, title='Default Message Notifications'
    )
    explicit_content_filter: Optional[int] = Field(
        None, title='Explicit Content Filter'
    )
    features: Optional[List[str]] = Field(None, title='Features')
    icon: Optional[str] = Field(None, title='Icon')
    id: Optional[str] = Field(None, title='Id')
    max_members: Optional[int] = Field(None, title='Max Members')
    max_stage_video_channel_users: Optional[int] = Field(
        None, title='Max Stage Video Channel Users'
    )
    max_video_channel_users: Optional[int] = Field(
        None, title='Max Video Channel Users'
    )
    mfa_level: Optional[int] = Field(None, title='Mfa Level')
    name: Optional[str] = Field(None, title='Name')
    nsfw: Optional[bool] = Field(None, title='Nsfw')
    nsfw_level: Optional[int] = Field(None, title='Nsfw Level')
    owner_id: Optional[str] = Field(None, title='Owner Id')
    preferred_locale: Optional[str] = Field(None, title='Preferred Locale')
    premium_progress_bar_enabled: Optional[bool] = Field(
        None, title='Premium Progress Bar Enabled'
    )
    premium_subscription_count: Optional[int] = Field(
        None, title='Premium Subscription Count'
    )
    premium_tier: Optional[int] = Field(None, title='Premium Tier')
    public_updates_channel_id: Optional[str] = Field(
        None, title='Public Updates Channel Id'
    )
    region: Optional[str] = Field(None, title='Region')
    rules_channel_id: Optional[str] = Field(None, title='Rules Channel Id')
    splash: Optional[str] = Field(None, title='Splash')
    system_channel_flags: Optional[int] = Field(None, title='System Channel Flags')
    system_channel_id: Optional[str] = Field(None, title='System Channel Id')
    vanity_url_code: Optional[str] = Field(None, title='Vanity Url Code')
    verification_level: Optional[int] = Field(None, title='Verification Level')
    widget_enabled: Optional[bool] = Field(None, title='Widget Enabled')


class GuildMemberProfile(BaseModel):
    guild_id: Optional[str] = Field(None, title='Guild Id')
    bio: Optional[str] = Field(None, title='Bio')
    banner: Optional[Any] = Field(None, title='Banner')
    accent_color: Optional[Any] = Field(None, title='Accent Color')


class HttpHeaders(BaseModel):
    User_Agent: Optional[str] = Field(None, alias='User-Agent', title='User-Agent')
    Accept: Optional[str] = Field(None, title='Accept')
    Accept_Language: Optional[str] = Field(
        None, alias='Accept-Language', title='Accept-Language'
    )
    Sec_Fetch_Mode: Optional[str] = Field(
        None, alias='Sec-Fetch-Mode', title='Sec-Fetch-Mode'
    )


class HttpHeaders1(BaseModel):
    User_Agent: Optional[str] = Field(None, alias='User-Agent', title='User-Agent')
    Accept: Optional[str] = Field(None, title='Accept')
    Accept_Language: Optional[str] = Field(
        None, alias='Accept-Language', title='Accept-Language'
    )
    Sec_Fetch_Mode: Optional[str] = Field(
        None, alias='Sec-Fetch-Mode', title='Sec-Fetch-Mode'
    )


class Identify(BaseModel):
    accent_color: Optional[int] = Field(None, title='Accent Color')
    avatar: Optional[str] = Field(None, title='Avatar')
    banner_color: Optional[str] = Field(None, title='Banner Color')
    discriminator: Optional[str] = Field(None, title='Discriminator')
    email: Optional[str] = Field(None, title='Email')
    flags: Optional[int] = Field(None, title='Flags')
    id: Optional[str] = Field(None, title='Id')
    locale: Optional[str] = Field(None, title='Locale')
    mfa_enabled: Optional[bool] = Field(None, title='Mfa Enabled')
    premium_type: Optional[int] = Field(None, title='Premium Type')
    public_flags: Optional[int] = Field(None, title='Public Flags')
    username: Optional[str] = Field(None, title='Username')
    verified: Optional[bool] = Field(None, title='Verified')


class InstagramCarouselMediaResponse(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    is_video: Optional[bool] = Field(False, title='Is Video')
    filename: Optional[str] = Field(None, title='Filename')


class InstagramPostRequest(BaseModel):
    content: str = Field(..., title='Content')
    user_id: int = Field(..., title='User Id')
    guild_id: int = Field(..., title='Guild Id')


class InstagramUserResponse(BaseModel):
    username: Optional[str] = Field(None, title='Username')
    full_name: Optional[str] = Field(None, title='Full Name')
    is_private: Optional[bool] = Field(None, title='Is Private')
    avatar_filename: Optional[str] = Field(None, title='Avatar Filename')
    avatar_url: Optional[str] = Field(None, title='Avatar Url')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    has_highlight_reels: Optional[bool] = Field(None, title='Has Highlight Reels')


class LanguageTranslationRequest(BaseModel):
    text: str = Field(..., title='Text')
    to_lang: str = Field(..., title='To Lang')
    from_lang: Optional[str] = Field(None, title='From Lang')


class LanguageTranslationRespone(BaseModel):
    text: str = Field(..., title='Text')
    to_lang: str = Field(..., title='To Lang')
    from_lang: Optional[str] = Field(None, title='From Lang')
    detected_lang: Optional[str] = Field(None, title='Detected Lang')


class LiveChat(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    video_id: Optional[str] = Field(None, title='Video Id')
    ext: Optional[str] = Field(None, title='Ext')
    protocol: Optional[str] = Field(None, title='Protocol')


class Location(BaseModel):
    short_name: Optional[str] = Field(None, title='Short Name')
    external_source: Optional[str] = Field(None, title='External Source')
    name: Optional[str] = Field(None, title='Name')
    address: Optional[str] = Field(None, title='Address')
    city: Optional[str] = Field(None, title='City')
    lng: Optional[float] = Field(None, title='Lng')
    lat: Optional[float] = Field(None, title='Lat')
    is_eligible_for_guides: Optional[bool] = Field(None, title='Is Eligible For Guides')


class MashupInfo(BaseModel):
    mashups_allowed: Optional[bool] = Field(None, title='Mashups Allowed')
    can_toggle_mashups_allowed: Optional[bool] = Field(
        None, title='Can Toggle Mashups Allowed'
    )
    has_been_mashed_up: Optional[bool] = Field(None, title='Has Been Mashed Up')
    formatted_mashups_count: Optional[Any] = Field(
        None, title='Formatted Mashups Count'
    )
    original_media: Optional[Any] = Field(None, title='Original Media')
    non_privacy_filtered_mashups_media_count: Optional[Any] = Field(
        None, title='Non Privacy Filtered Mashups Media Count'
    )
    mashup_type: Optional[Any] = Field(None, title='Mashup Type')
    is_creator_requesting_mashup: Optional[bool] = Field(
        None, title='Is Creator Requesting Mashup'
    )
    has_nonmimicable_additional_audio: Optional[Any] = Field(
        None, title='Has Nonmimicable Additional Audio'
    )


class MatchedPgcSound(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    mixed_title: Optional[str] = Field(None, title='Mixed Title')
    mixed_author: Optional[str] = Field(None, title='Mixed Author')
    author: Optional[str] = Field(None, title='Author')


class MelanieEmoji(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    id: Optional[int] = Field(None, title='Id')
    animated: Optional[bool] = Field(None, title='Animated')
    url: Optional[str] = Field(None, title='Url')
    dispaly_name: Optional[str] = Field(None, title='Dispaly Name')


class ModelType(Enum):
    u2net = 'u2net'
    u2netp = 'u2netp'
    u2net_human_seg = 'u2net_human_seg'
    u2net_cloth_seg = 'u2net_cloth_seg'


class MutualGuild(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    nick: Optional[Any] = Field(None, title='Nick')


class OCRReadResponse(BaseModel):
    lines: Optional[List[str]] = Field([], title='Lines')


class OCRRquest(BaseModel):
    url: str = Field(..., title='Url')


class OriginCover(BaseModel):
    url_list: Optional[List[str]] = Field(None, title='Url List')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class PlayAddr(BaseModel):
    height: Optional[int] = Field(None, title='Height')
    url_key: Optional[str] = Field(None, title='Url Key')
    data_size: Optional[int] = Field(None, title='Data Size')
    file_hash: Optional[str] = Field(None, title='File Hash')
    file_cs: Optional[str] = Field(None, title='File Cs')
    url_list: Optional[List[str]] = Field(None, title='Url List')
    width: Optional[int] = Field(None, title='Width')


class ReviewResult(BaseModel):
    review_status: Optional[int] = Field(None, title='Review Status')


class RiskInfos(BaseModel):
    type: Optional[int] = Field(None, title='Type')
    content: Optional[str] = Field(None, title='Content')
    vote: Optional[bool] = Field(None, title='Vote')
    warn: Optional[bool] = Field(None, title='Warn')
    risk_sink: Optional[bool] = Field(None, title='Risk Sink')


class RouteStatsModels(BaseModel):
    route: str = Field(..., title='Route')
    count: int = Field(..., title='Count')
    avg_latency: float = Field(..., title='Avg Latency')
    data: Optional[List[APIAuditEvent]] = Field(None, title='Data')


class SearchResultItem(BaseModel):
    title: Optional[str] = Field(None, title='Title')
    content: Optional[str] = Field(None, title='Content')
    url: Optional[str] = Field(None, title='Url')


class ServiceLoginResponse(BaseModel):
    user: str = Field(..., title='User')
    token_data: Optional[Any] = Field(None, title='Token Data')


class ShareInfo(BaseModel):
    share_title: Optional[str] = Field(None, title='Share Title')
    bool_persist: Optional[int] = Field(None, title='Bool Persist')
    share_title_myself: Optional[str] = Field(None, title='Share Title Myself')
    share_signature_desc: Optional[str] = Field(None, title='Share Signature Desc')
    share_signature_url: Optional[str] = Field(None, title='Share Signature Url')
    share_quote: Optional[str] = Field(None, title='Share Quote')
    share_desc_info: Optional[str] = Field(None, title='Share Desc Info')
    share_url: Optional[str] = Field(None, title='Share Url')
    share_weibo_desc: Optional[str] = Field(None, title='Share Weibo Desc')
    share_desc: Optional[str] = Field(None, title='Share Desc')
    share_title_other: Optional[str] = Field(None, title='Share Title Other')
    share_link_desc: Optional[str] = Field(None, title='Share Link Desc')


class SpotifyData(BaseModel):
    album_cover_url: Optional[str] = Field(None, title='Album Cover Url')
    tile: Optional[str] = Field(None, title='Tile')
    artist: Optional[Any] = Field(None, title='Artist')
    album: Optional[str] = Field(None, title='Album')
    track_id: Optional[str] = Field(None, title='Track Id')
    start: Optional[int] = Field(None, title='Start')
    end: Optional[int] = Field(None, title='End')
    duration: Optional[float] = Field(None, title='Duration')


class Status(BaseModel):
    is_delete: Optional[bool] = Field(None, title='Is Delete')
    allow_comment: Optional[bool] = Field(None, title='Allow Comment')
    private_status: Optional[int] = Field(None, title='Private Status')
    reviewed: Optional[int] = Field(None, title='Reviewed')
    is_prohibited: Optional[bool] = Field(None, title='Is Prohibited')
    review_result: Optional[ReviewResult] = None
    aweme_id: Optional[str] = Field(None, title='Aweme Id')
    allow_share: Optional[bool] = Field(None, title='Allow Share')
    in_reviewing: Optional[bool] = Field(None, title='In Reviewing')
    self_see: Optional[bool] = Field(None, title='Self See')
    download_status: Optional[int] = Field(None, title='Download Status')


class StoryItem(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    is_video: Optional[bool] = Field(None, title='Is Video')
    filename: Optional[str] = Field(None, title='Filename')
    url: Optional[str] = Field(None, title='Url')
    taken_at: Optional[int] = Field(None, title='Taken At')
    video_bytes: Optional[bytes] = Field(None, title='Video Bytes')


class Subtitles(BaseModel):
    live_chat: Optional[List[LiveChat]] = Field(None, title='Live Chat')


class Thumbnail(BaseModel):
    url: Optional[str] = Field(None, title='Url')
    preference: Optional[int] = Field(None, title='Preference')
    id: Optional[str] = Field(None, title='Id')
    height: Optional[int] = Field(None, title='Height')
    width: Optional[int] = Field(None, title='Width')
    resolution: Optional[str] = Field(None, title='Resolution')


class TikTokUserProfileResponse(BaseModel):
    avatar_filename: Optional[str] = Field(None, title='Avatar Filename')
    avatar_url: Optional[str] = Field(None, title='Avatar Url')
    bio_link: Optional[str] = Field(None, title='Bio Link')
    digg_count: Optional[int] = Field(None, title='Digg Count')
    follower_count: Optional[int] = Field(None, title='Follower Count')
    following_count: Optional[int] = Field(None, title='Following Count')
    ftc: Optional[bool] = Field(None, title='Ftc')
    heart_count: Optional[int] = Field(None, title='Heart Count')
    heart: Optional[int] = Field(None, title='Heart')
    id: Optional[str] = Field(None, title='Id')
    is_ad_virtual: Optional[bool] = Field(None, title='Is Ad Virtual')
    is_under_age18: Optional[bool] = Field(None, title='Is Under Age18')
    nickname: Optional[str] = Field(None, title='Nickname')
    open_favorite: Optional[bool] = Field(None, title='Open Favorite')
    private_account: Optional[bool] = Field(None, title='Private Account')
    relation: Optional[int] = Field(None, title='Relation')
    secret: Optional[bool] = Field(None, title='Secret')
    signature: Optional[str] = Field(None, title='Signature')
    tt_seller: Optional[bool] = Field(None, title='Tt Seller')
    unique_id: Optional[str] = Field(None, title='Unique Id')
    verified: Optional[bool] = Field(None, title='Verified')
    video_count: Optional[int] = Field(None, title='Video Count')

    def format(self, text):
        if " thousand" in text:
            text=text.replace(" thousand", "k")
        if " million" in text:
            text=text.replace(" million", "m")
        return text


    def make_embed(self,ctx) -> discord.Embed:
        badges=[]
        if self.verified:
            badges.append("<a:b_verifybluecs:926931019339284561>")
          
        if self.private_account:
            badges.append("🔒")
        if badges:
            add=f" ∙ \u200b{''.join(badges)}"
        else:
            add=""
        embed=discord.Embed(title=f'{self.nickname}(@{self.unique_id})', url=f'https://tiktok.com/@{self.unique_id}', description=f'{self.signature}', color=color).set_author(name=ctx.author.display_name if ctx.author.nick else str(ctx.author), icon_url=ctx.author.display_avatar)
        embed.set_thumbnail(url=f'{self.avatar_url}')
       # embed.add_field(name='Posts', value=f'{self.format(humanize.intword(self.video_count))}', inline=True)
        embed.add_field(name='Likes', value=f'{self.format(humanize.intword(self.heart_count))}', inline=False)
        embed.add_field(name='Followers', value=f'{self.format(humanize.intword(self.follower_count))}', inline=True)
        embed.add_field(name='Following', value=f'{self.format(humanize.intword(self.following_count))}', inline=False)
        embed.set_footer(icon_url="https://media.discordapp.net/attachments/782123801319440384/839483147740905492/839437202164547654.gif",text="Powered by melaniebot")
        return embed

    @classmethod
    async def from_url(cls, session: aiohttp.ClientSession, ctx, username: str):
        async with session.get(f"https://dev.melaniebot.gg/api/tiktok/{username}") as r:
            return cls.parse_raw(await r.read())


class TiktokPostRequest(BaseModel):
    url: Optional[str] = Field(None, title='Url')


class TokenData(BaseModel):
    access_token: Optional[str] = Field(None, title='Access Token')
    expires_in: Optional[int] = Field(None, title='Expires In')
    guild: Optional[Guild] = None
    refresh_token: Optional[str] = Field(None, title='Refresh Token')
    scope: Optional[str] = Field(None, title='Scope')
    token_type: Optional[str] = Field(None, title='Token Type')


class User(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    username: Optional[str] = Field(None, title='Username')
    avatar: Optional[str] = Field(None, title='Avatar')
    avatar_decoration: Optional[Any] = Field(None, title='Avatar Decoration')
    discriminator: Optional[str] = Field(None, title='Discriminator')
    public_flags: Optional[int] = Field(None, title='Public Flags')
    flags: Optional[int] = Field(None, title='Flags')
    banner: Optional[Any] = Field(None, title='Banner')
    banner_color: Optional[str] = Field(None, title='Banner Color')
    accent_color: Optional[int] = Field(None, title='Accent Color')
    bio: Optional[str] = Field(None, title='Bio')


class User1(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    username: Optional[str] = Field(None, title='Username')
    avatar: Optional[str] = Field(None, title='Avatar')
    avatar_decoration: Optional[Any] = Field(None, title='Avatar Decoration')
    discriminator: Optional[str] = Field(None, title='Discriminator')
    public_flags: Optional[int] = Field(None, title='Public Flags')


class User2(BaseModel):
    username: Optional[str] = Field(None, title='Username')
    full_name: Optional[str] = Field(None, title='Full Name')
    is_private: Optional[bool] = Field(None, title='Is Private')
    avatar_filename: Optional[str] = Field(None, title='Avatar Filename')
    avatar_url: Optional[str] = Field(None, title='Avatar Url')
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    has_highlight_reels: Optional[bool] = Field(None, title='Has Highlight Reels')


class UserGuild(BaseModel):
    features: Optional[List[str]] = Field(None, title='Features')
    icon: Optional[str] = Field(None, title='Icon')
    id: Optional[str] = Field(None, title='Id')
    name: Optional[str] = Field(None, title='Name')
    owner: Optional[bool] = Field(None, title='Owner')
    permissions: Optional[str] = Field(None, title='Permissions')


class UserProfile(BaseModel):
    bio: Optional[str] = Field(None, title='Bio')
    accent_color: Optional[int] = Field(None, title='Accent Color')
    banner: Optional[Any] = Field(None, title='Banner')


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class VideoControl(BaseModel):
    allow_duet: Optional[bool] = Field(None, title='Allow Duet')
    allow_download: Optional[bool] = Field(None, title='Allow Download')
    show_progress_bar: Optional[int] = Field(None, title='Show Progress Bar')
    draft_progress_bar: Optional[int] = Field(None, title='Draft Progress Bar')
    allow_dynamic_wallpaper: Optional[bool] = Field(
        None, title='Allow Dynamic Wallpaper'
    )
    timer_status: Optional[int] = Field(None, title='Timer Status')
    allow_music: Optional[bool] = Field(None, title='Allow Music')
    allow_stitch: Optional[bool] = Field(None, title='Allow Stitch')
    share_type: Optional[int] = Field(None, title='Share Type')
    allow_react: Optional[bool] = Field(None, title='Allow React')
    prevent_download_type: Optional[int] = Field(None, title='Prevent Download Type')


class VideoIcon(BaseModel):
    url_list: Optional[List[str]] = Field(None, title='Url List')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')


class YTSearchRequest(BaseModel):
    query: str = Field(..., title='Query')


class ModelsChatSearchResult(BaseModel):
    response: Optional[List[SearchResultItem]] = Field([], title='Response')


class APIUsageStatsModel(BaseModel):
    username: str = Field(..., title='Username')
    routes: Optional[Dict[str, RouteStatsModels]] = Field({}, title='Routes')


class Author(BaseModel):
    status: Optional[int] = Field(None, title='Status')
    unique_id: Optional[str] = Field(None, title='Unique Id')
    has_youtube_token: Optional[bool] = Field(None, title='Has Youtube Token')
    authority_status: Optional[int] = Field(None, title='Authority Status')
    shield_comment_notice: Optional[int] = Field(None, title='Shield Comment Notice')
    with_commerce_entry: Optional[bool] = Field(None, title='With Commerce Entry')
    is_discipline_member: Optional[bool] = Field(None, title='Is Discipline Member')
    unique_id_modify_time: Optional[int] = Field(None, title='Unique Id Modify Time')
    user_tags: Optional[Any] = Field(None, title='User Tags')
    advance_feature_item_order: Optional[Any] = Field(
        None, title='Advance Feature Item Order'
    )
    user_mode: Optional[int] = Field(None, title='User Mode')
    aweme_count: Optional[int] = Field(None, title='Aweme Count')
    region: Optional[str] = Field(None, title='Region')
    prevent_download: Optional[bool] = Field(None, title='Prevent Download')
    is_phone_binded: Optional[bool] = Field(None, title='Is Phone Binded')
    accept_private_policy: Optional[bool] = Field(None, title='Accept Private Policy')
    enterprise_verify_reason: Optional[str] = Field(
        None, title='Enterprise Verify Reason'
    )
    youtube_channel_id: Optional[str] = Field(None, title='Youtube Channel Id')
    bind_phone: Optional[str] = Field(None, title='Bind Phone')
    has_twitter_token: Optional[bool] = Field(None, title='Has Twitter Token')
    fb_expire_time: Optional[int] = Field(None, title='Fb Expire Time')
    room_id: Optional[int] = Field(None, title='Room Id')
    live_verify: Optional[int] = Field(None, title='Live Verify')
    shield_digg_notice: Optional[int] = Field(None, title='Shield Digg Notice')
    avatar_medium: Optional[VideoIcon] = None
    shield_follow_notice: Optional[int] = Field(None, title='Shield Follow Notice')
    ins_id: Optional[str] = Field(None, title='Ins Id')
    download_setting: Optional[int] = Field(None, title='Download Setting')
    item_list: Optional[Any] = Field(None, title='Item List')
    live_agreement: Optional[int] = Field(None, title='Live Agreement')
    download_prompt_ts: Optional[int] = Field(None, title='Download Prompt Ts')
    share_info: Optional[ShareInfo] = None
    user_canceled: Optional[bool] = Field(None, title='User Canceled')
    comment_filter_status: Optional[int] = Field(None, title='Comment Filter Status')
    need_points: Optional[Any] = Field(None, title='Need Points')
    has_email: Optional[bool] = Field(None, title='Has Email')
    cv_level: Optional[str] = Field(None, title='Cv Level')
    type_label: Optional[Any] = Field(None, title='Type Label')
    homepage_bottom_toast: Optional[Any] = Field(None, title='Homepage Bottom Toast')
    bold_fields: Optional[Any] = Field(None, title='Bold Fields')
    mutual_relation_avatars: Optional[Any] = Field(
        None, title='Mutual Relation Avatars'
    )
    video_icon: Optional[VideoIcon] = None
    create_time: Optional[int] = Field(None, title='Create Time')
    uid: Optional[str] = Field(None, title='Uid')
    nickname: Optional[str] = Field(None, title='Nickname')
    follower_count: Optional[int] = Field(None, title='Follower Count')
    verify_info: Optional[str] = Field(None, title='Verify Info')
    followers_detail: Optional[Any] = Field(None, title='Followers Detail')
    account_region: Optional[str] = Field(None, title='Account Region')
    total_favorited: Optional[int] = Field(None, title='Total Favorited')
    hide_search: Optional[bool] = Field(None, title='Hide Search')
    commerce_user_level: Optional[int] = Field(None, title='Commerce User Level')
    platform_sync_info: Optional[Any] = Field(None, title='Platform Sync Info')
    google_account: Optional[str] = Field(None, title='Google Account')
    youtube_channel_title: Optional[str] = Field(None, title='Youtube Channel Title')
    custom_verify: Optional[str] = Field(None, title='Custom Verify')
    is_ad_fake: Optional[bool] = Field(None, title='Is Ad Fake')
    follower_status: Optional[int] = Field(None, title='Follower Status')
    live_commerce: Optional[bool] = Field(None, title='Live Commerce')
    is_star: Optional[bool] = Field(None, title='Is Star')
    relative_users: Optional[Any] = Field(None, title='Relative Users')
    avatar_thumb: Optional[VideoIcon] = None
    is_block: Optional[bool] = Field(None, title='Is Block')
    show_image_bubble: Optional[bool] = Field(None, title='Show Image Bubble')
    twitter_id: Optional[str] = Field(None, title='Twitter Id')
    comment_setting: Optional[int] = Field(None, title='Comment Setting')
    react_setting: Optional[int] = Field(None, title='React Setting')
    signature: Optional[str] = Field(None, title='Signature')
    following_count: Optional[int] = Field(None, title='Following Count')
    tw_expire_time: Optional[int] = Field(None, title='Tw Expire Time')
    has_orders: Optional[bool] = Field(None, title='Has Orders')
    cha_list: Optional[Any] = Field(None, title='Cha List')
    search_highlight: Optional[Any] = Field(None, title='Search Highlight')
    need_recommend: Optional[int] = Field(None, title='Need Recommend')
    duet_setting: Optional[int] = Field(None, title='Duet Setting')
    user_period: Optional[int] = Field(None, title='User Period')
    user_rate: Optional[int] = Field(None, title='User Rate')
    ad_cover_url: Optional[Any] = Field(None, title='Ad Cover Url')
    short_id: Optional[str] = Field(None, title='Short Id')
    special_lock: Optional[int] = Field(None, title='Special Lock')
    has_facebook_token: Optional[bool] = Field(None, title='Has Facebook Token')
    with_shop_entry: Optional[bool] = Field(None, title='With Shop Entry')
    secret: Optional[int] = Field(None, title='Secret')
    apple_account: Optional[int] = Field(None, title='Apple Account')
    can_set_geofencing: Optional[Any] = Field(None, title='Can Set Geofencing')
    white_cover_url: Optional[Any] = Field(None, title='White Cover Url')
    youtube_expire_time: Optional[int] = Field(None, title='Youtube Expire Time')
    verification_type: Optional[int] = Field(None, title='Verification Type')
    twitter_name: Optional[str] = Field(None, title='Twitter Name')
    language: Optional[str] = Field(None, title='Language')
    follow_status: Optional[int] = Field(None, title='Follow Status')
    favoriting_count: Optional[int] = Field(None, title='Favoriting Count')
    stitch_setting: Optional[int] = Field(None, title='Stitch Setting')
    events: Optional[Any] = Field(None, title='Events')


class BannerType(BaseModel):
    banner: str = Field(..., title='Banner')
    url: Optional[AnyUrl] = Field(None, title='Url')
    color: Optional[ColorLookup] = None
    guild_id: Optional[int] = Field(None, title='Guild Id')
    format: Optional[str] = Field(None, title='Format')
    user_id: Optional[int] = Field(None, title='User Id')


class BioMember(BaseModel):
    bio: Optional[str] = Field(None, title='Bio')
    banner: Optional[BannerType] = None


class BioUser(BaseModel):
    bio: Optional[str] = Field(None, title='Bio')
    banner: Optional[BannerType] = None


class BitRateItem(BaseModel):
    gear_name: Optional[str] = Field(None, title='Gear Name')
    quality_type: Optional[int] = Field(None, title='Quality Type')
    bit_rate: Optional[int] = Field(None, title='Bit Rate')
    play_addr: Optional[PlayAddr] = None
    is_h265: Optional[int] = Field(None, title='Is H265')
    is_bytevc1: Optional[int] = Field(None, title='Is Bytevc1')
    dub_infos: Optional[Any] = Field(None, title='Dub Infos')


class Caption(BaseModel):
    user_id: Optional[int] = Field(None, title='User Id')
    text: Optional[str] = Field(None, title='Text')
    type: Optional[int] = Field(None, title='Type')
    created_at: Optional[int] = Field(None, title='Created At')
    created_at_utc: Optional[int] = Field(None, title='Created At Utc')
    content_type: Optional[str] = Field(None, title='Content Type')
    status: Optional[str] = Field(None, title='Status')
    bit_flags: Optional[int] = Field(None, title='Bit Flags')
    did_report_as_spam: Optional[bool] = Field(None, title='Did Report As Spam')
    share_enabled: Optional[bool] = Field(None, title='Share Enabled')
    user: Optional[User2] = None
    is_covered: Optional[bool] = Field(None, title='Is Covered')
    media_id: Optional[str] = Field(None, title='Media Id')
    private_reply_status: Optional[int] = Field(None, title='Private Reply Status')


class Comment(BaseModel):
    pk: Optional[str] = Field(None, title='Pk')
    user_id: Optional[int] = Field(None, title='User Id')
    text: Optional[str] = Field(None, title='Text')
    type: Optional[int] = Field(None, title='Type')
    created_at: Optional[int] = Field(None, title='Created At')
    created_at_utc: Optional[int] = Field(None, title='Created At Utc')
    content_type: Optional[str] = Field(None, title='Content Type')
    status: Optional[str] = Field(None, title='Status')
    bit_flags: Optional[int] = Field(None, title='Bit Flags')
    did_report_as_spam: Optional[bool] = Field(None, title='Did Report As Spam')
    share_enabled: Optional[bool] = Field(None, title='Share Enabled')
    user: Optional[InstagramUserResponse] = None
    is_covered: Optional[bool] = Field(None, title='Is Covered')
    media_id: Optional[str] = Field(None, title='Media Id')
    has_liked_comment: Optional[bool] = Field(None, title='Has Liked Comment')
    comment_like_count: Optional[int] = Field(None, title='Comment Like Count')
    private_reply_status: Optional[int] = Field(None, title='Private Reply Status')


class Format(BaseModel):
    format_id: Optional[str] = Field(None, title='Format Id')
    format_note: Optional[str] = Field(None, title='Format Note')
    ext: Optional[str] = Field(None, title='Ext')
    protocol: Optional[str] = Field(None, title='Protocol')
    acodec: Optional[str] = Field(None, title='Acodec')
    vcodec: Optional[str] = Field(None, title='Vcodec')
    url: Optional[str] = Field(None, title='Url')
    width: Optional[int] = Field(None, title='Width')
    height: Optional[int] = Field(None, title='Height')
    fps: Optional[float] = Field(None, title='Fps')
    rows: Optional[int] = Field(None, title='Rows')
    columns: Optional[int] = Field(None, title='Columns')
    fragments: Optional[List[Fragment]] = Field(None, title='Fragments')
    audio_ext: Optional[str] = Field(None, title='Audio Ext')
    video_ext: Optional[str] = Field(None, title='Video Ext')
    format: Optional[str] = Field(None, title='Format')
    resolution: Optional[str] = Field(None, title='Resolution')
    http_headers: Optional[HttpHeaders] = None
    asr: Optional[int] = Field(None, title='Asr')
    filesize: Optional[int] = Field(None, title='Filesize')
    source_preference: Optional[int] = Field(None, title='Source Preference')
    audio_channels: Optional[int] = Field(None, title='Audio Channels')
    quality: Optional[int] = Field(None, title='Quality')
    has_drm: Optional[bool] = Field(None, title='Has Drm')
    tbr: Optional[float] = Field(None, title='Tbr')
    language: Optional[str] = Field(None, title='Language')
    language_preference: Optional[int] = Field(None, title='Language Preference')
    preference: Optional[int] = Field(None, title='Preference')
    dynamic_range: Optional[str] = Field(None, title='Dynamic Range')
    abr: Optional[float] = Field(None, title='Abr')
    downloader_options: Optional[DownloaderOptions] = None
    container: Optional[str] = Field(None, title='Container')
    vbr: Optional[float] = Field(None, title='Vbr')
    filesize_approx: Optional[int] = Field(None, title='Filesize Approx')


class GuildMember(BaseModel):
    avatar: Optional[Any] = Field(None, title='Avatar')
    communication_disabled_until: Optional[Any] = Field(
        None, title='Communication Disabled Until'
    )
    flags: Optional[int] = Field(None, title='Flags')
    is_pending: Optional[bool] = Field(None, title='Is Pending')
    joined_at: Optional[str] = Field(None, title='Joined At')
    nick: Optional[Any] = Field(None, title='Nick')
    pending: Optional[bool] = Field(None, title='Pending')
    premium_since: Optional[str] = Field(None, title='Premium Since')
    roles: Optional[List[str]] = Field(None, title='Roles')
    user: Optional[User1] = None
    bio: Optional[str] = Field(None, title='Bio')
    banner: Optional[Any] = Field(None, title='Banner')
    mute: Optional[bool] = Field(None, title='Mute')
    deaf: Optional[bool] = Field(None, title='Deaf')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class Image(BaseModel):
    user_watermark_image: Optional[VideoIcon] = None
    thumbnail: Optional[VideoIcon] = None
    display_image: Optional[VideoIcon] = None
    owner_watermark_image: Optional[VideoIcon] = None


class ImagePostCover(BaseModel):
    thumbnail: Optional[VideoIcon] = None
    display_image: Optional[VideoIcon] = None
    owner_watermark_image: Optional[VideoIcon] = None
    user_watermark_image: Optional[VideoIcon] = None


class ImagePostInfo(BaseModel):
    music_volume: Optional[float] = Field(None, title='Music Volume')
    images: Optional[List[Image]] = Field(None, title='Images')
    image_post_cover: Optional[ImagePostCover] = None


class In(BaseModel):
    user: Optional[InstagramUserResponse] = None
    position: Optional[List[float]] = Field(None, title='Position')
    start_time_in_video_in_sec: Optional[Any] = Field(
        None, title='Start Time In Video In Sec'
    )
    duration_in_video_in_sec: Optional[Any] = Field(
        None, title='Duration In Video In Sec'
    )

class UWUTextRequest(BaseModel):
    text: constr(min_length=1, max_length=1000, strict=True)


class UWUTextResponse(BaseModel):
    text: str

    def get_text(self):
        return self.text

    @classmethod
    async def from_url(cls, session: aiohttp.ClientSession, text: str):
        async with session.post(f"https://dev.melaniebot.gg/api/discord/uwu", json={'text':text}) as r:
            return cls.parse_raw(await r.read())


class InstagramStoryResposne(BaseModel):
    author: Optional[InstagramUserResponse] = None
    items: Optional[List[StoryItem]] = Field([], title='Items')
    item_count: Optional[int] = Field(None, title='Item Count')
    created_at: Optional[int] = Field(None, title='Created At')

    def format(self, text):
        if " thousand" in text:
            text=text.replace(" thousand", "k")
        if " million" in text:
            text=text.replace(" million", "m")
        return text

    def make_embed(self,ctx):
        video=False
        if not self.item_count:
            return None
        if self.item_count > 1:
            for item in self.items:
                if item.is_video:
                    video=True
        else:
            if self.items[0].is_video:
                embed=discord.Embed(description=f"[Post](https://instagram.com/{self.author.username}) Requested By {ctx.author.mention}",url=f'https://instagram.com/{self.author.username}', color=color).set_author(name=self.author.username, icon_url=self.author.avatar_url)
                embed.set_footer(icon_url="https://www.designpieces.com/wp-content/uploads/2016/05/Instagram-v051916-150x150.png", text="Instagram | Powered by melaniebot")
                return [False,embed] 
        if video == True and len(self.items) <= 1:
            embed=discord.Embed(description=f"[Post](https://instagram.com/{self.author.username}) Requested By {ctx.author.mention}",url=f'https://instagram.com/{self.author.username}', color=color).set_author(name=self.author.username, icon_url=self.author.avatar_url)
            embed.set_footer(icon_url="https://www.designpieces.com/wp-content/uploads/2016/05/Instagram-v051916-150x150.png", text="Instagram | Powered by melaniebot")
            return [False,embed]
        elif video == True and len(self.items) > 1:
            embed=discord.Embed(description=f"[Post](https://instagram.com/{self.author.username}) Requested By {ctx.author.mention}",url=f'https://instagram.com/{self.author.username}', color=color).set_author(name=self.author.username, icon_url=self.author.avatar_url)
            embed.set_footer(icon_url="https://www.designpieces.com/wp-content/uploads/2016/05/Instagram-v051916-150x150.png", text="Instagram | Powered by melaniebot")
            return {'items':self.items,'embed':embed}
        else:
            if video==False:
                embeds=[]
                for item in self.items:
                    embed=discord.Embed(description=f"[Post](https://instagram.com/{self.author.username}) Requested By {ctx.author.mention}",url=f'https://instagram.com/{self.author.username}', color=color).set_author(name=self.author.username, icon_url=self.author.avatar_url)
                    embed.set_image(url=item.url)
                    embed.set_footer(icon_url="https://www.designpieces.com/wp-content/uploads/2016/05/Instagram-v051916-150x150.png", text="Instagram | Powered by melaniebot")
                    embeds.append(embed)
                return [True,embeds]
            else:
                embed=discord.Embed(description=f"[Post](https://instagram.com/{self.author.username}) Requested By {ctx.author.mention}",url=f'https://instagram.com/{self.author.username}', color=color).set_author(name=self.author.username, icon_url=self.author.avatar_url)
                embed.set_footer(icon_url="https://www.designpieces.com/wp-content/uploads/2016/05/Instagram-v051916-150x150.png", text="Instagram | Powered by melaniebot")
                return [False,embed]

    @classmethod
    async def from_url(cls, session: aiohttp.ClientSession, ctx, username: str):
        async with session.get(f"https://dev.melaniebot.gg/api/instagram/story/{username}") as r:
            return cls.parse_raw(await r.read())



class MatchedSong(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    author: Optional[str] = Field(None, title='Author')
    title: Optional[str] = Field(None, title='Title')
    h5_url: Optional[str] = Field(None, title='H5 Url')
    cover_medium: Optional[VideoIcon] = None
    performers: Optional[Any] = Field(None, title='Performers')
    chorus_info: Optional[ChorusInfo] = None


class MelanieActivity(BaseModel):
    name: Optional[str] = Field(None, title='Name')
    primary: Optional[bool] = Field(False, title='Primary')
    emoji: Optional[MelanieEmoji] = None
    created_at: Optional[int] = Field(1666275874.0944138, title='Created At')
    url: Optional[str] = Field(None, title='Url')
    assets: Optional[ActivityAsset] = None
    spotify_data: Optional[SpotifyData] = None
    state: Optional[str] = Field(None, title='State')
    flags: Optional[int] = Field(None, title='Flags')
    type: Optional[int] = Field(None, title='Type')
    color: Optional[ColorLookup] = None
    application_id: Optional[int] = Field(None, title='Application Id')
    session_id: Optional[str] = Field(None, title='Session Id')


class Music(BaseModel):
    user_count: Optional[int] = Field(None, title='User Count')
    external_song_info: Optional[List] = Field(None, title='External Song Info')
    is_author_artist: Optional[bool] = Field(None, title='Is Author Artist')
    lyric_short_position: Optional[Any] = Field(None, title='Lyric Short Position')
    status: Optional[int] = Field(None, title='Status')
    owner_handle: Optional[str] = Field(None, title='Owner Handle')
    shoot_duration: Optional[int] = Field(None, title='Shoot Duration')
    is_original: Optional[bool] = Field(None, title='Is Original')
    mid: Optional[str] = Field(None, title='Mid')
    artists: Optional[List] = Field(None, title='Artists')
    source_platform: Optional[int] = Field(None, title='Source Platform')
    duration: Optional[int] = Field(None, title='Duration')
    position: Optional[Any] = Field(None, title='Position')
    author_position: Optional[Any] = Field(None, title='Author Position')
    id_str: Optional[str] = Field(None, title='Id Str')
    album: Optional[str] = Field(None, title='Album')
    collect_stat: Optional[int] = Field(None, title='Collect Stat')
    owner_id: Optional[str] = Field(None, title='Owner Id')
    owner_nickname: Optional[str] = Field(None, title='Owner Nickname')
    tag_list: Optional[Any] = Field(None, title='Tag List')
    matched_song: Optional[MatchedSong] = None
    search_highlight: Optional[Any] = Field(None, title='Search Highlight')
    author: Optional[str] = Field(None, title='Author')
    audition_duration: Optional[int] = Field(None, title='Audition Duration')
    video_duration: Optional[int] = Field(None, title='Video Duration')
    is_pgc: Optional[bool] = Field(None, title='Is Pgc')
    is_matched_metadata: Optional[bool] = Field(None, title='Is Matched Metadata')
    is_audio_url_with_cookie: Optional[bool] = Field(
        None, title='Is Audio Url With Cookie'
    )
    offline_desc: Optional[str] = Field(None, title='Offline Desc')
    binded_challenge_id: Optional[int] = Field(None, title='Binded Challenge Id')
    prevent_download: Optional[bool] = Field(None, title='Prevent Download')
    preview_end_time: Optional[int] = Field(None, title='Preview End Time')
    is_original_sound: Optional[bool] = Field(None, title='Is Original Sound')
    multi_bit_rate_play_info: Optional[Any] = Field(
        None, title='Multi Bit Rate Play Info'
    )
    is_commerce_music: Optional[bool] = Field(None, title='Is Commerce Music')
    mute_share: Optional[bool] = Field(None, title='Mute Share')
    dmv_auto_show: Optional[bool] = Field(None, title='Dmv Auto Show')
    id: Optional[int] = Field(None, title='Id')
    title: Optional[str] = Field(None, title='Title')
    author_deleted: Optional[bool] = Field(None, title='Author Deleted')
    preview_start_time: Optional[int] = Field(None, title='Preview Start Time')
    matched_pgc_sound: Optional[MatchedPgcSound] = None


class ProfileModel(BaseModel):
    user: Optional[User] = None
    connected_accounts: Optional[List[ConnectedAccount]] = Field(
        None, title='Connected Accounts'
    )
    premium_since: Optional[str] = Field(None, title='Premium Since')
    premium_type: Optional[int] = Field(None, title='Premium Type')
    premium_guild_since: Optional[str] = Field(None, title='Premium Guild Since')
    profile_themes_experiment_bucket: Optional[int] = Field(
        None, title='Profile Themes Experiment Bucket'
    )
    mutual_guilds: Optional[List[MutualGuild]] = Field(None, title='Mutual Guilds')
    guild_member: Optional[GuildMember] = None
    user_profile: Optional[UserProfile] = None
    guild_member_profile: Optional[GuildMemberProfile] = None


class UserData(BaseModel):
    guilds: Optional[List[UserGuild]] = Field(None, title='Guilds')
    identify: Optional[Identify] = None


class Usertags(BaseModel):
    in_: Optional[List[In]] = Field(None, alias='in', title='In')


class Video(BaseModel):
    has_watermark: Optional[bool] = Field(None, title='Has Watermark')
    bytes: Optional[bytes] = Field(None, title='Bytes')
    is_callback: Optional[bool] = Field(None, title='Is Callback')
    big_thumbs: Optional[Any] = Field(None, title='Big Thumbs')
    is_bytevc1: Optional[int] = Field(None, title='Is Bytevc1')
    ratio: Optional[str] = Field(None, title='Ratio')
    height: Optional[int] = Field(None, title='Height')
    need_set_token: Optional[bool] = Field(None, title='Need Set Token')
    tags: Optional[Any] = Field(None, title='Tags')
    width: Optional[int] = Field(None, title='Width')
    dynamic_cover: Optional[VideoIcon] = None
    origin_cover: Optional[OriginCover] = None
    bit_rate: Optional[List[BitRateItem]] = Field(None, title='Bit Rate')
    duration: Optional[int] = Field(None, title='Duration')
    is_h265: Optional[int] = Field(None, title='Is H265')
    cdn_url_expired: Optional[int] = Field(None, title='Cdn Url Expired')


class MelanieModelsYtDlpSearchSearchResult(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    title: Optional[str] = Field(None, title='Title')
    formats: Optional[List[Format]] = Field(None, title='Formats')
    thumbnails: Optional[List[Thumbnail]] = Field(None, title='Thumbnails')
    thumbnail: Optional[str] = Field(None, title='Thumbnail')
    description: Optional[str] = Field(None, title='Description')
    uploader: Optional[str] = Field(None, title='Uploader')
    uploader_id: Optional[str] = Field(None, title='Uploader Id')
    uploader_url: Optional[str] = Field(None, title='Uploader Url')
    channel_id: Optional[str] = Field(None, title='Channel Id')
    channel_url: Optional[str] = Field(None, title='Channel Url')
    duration: Optional[int] = Field(None, title='Duration')
    view_count: Optional[int] = Field(None, title='View Count')
    average_rating: Optional[Any] = Field(None, title='Average Rating')
    age_limit: Optional[int] = Field(None, title='Age Limit')
    webpage_url: Optional[str] = Field(None, title='Webpage Url')
    categories: Optional[List[str]] = Field(None, title='Categories')
    tags: Optional[List[str]] = Field(None, title='Tags')
    playable_in_embed: Optional[bool] = Field(None, title='Playable In Embed')
    is_live: Optional[bool] = Field(None, title='Is Live')
    was_live: Optional[bool] = Field(None, title='Was Live')
    live_status: Optional[str] = Field(None, title='Live Status')
    release_timestamp: Optional[int] = Field(None, title='Release Timestamp')
    automatic_captions: Optional[Dict[str, Any]] = Field(
        None, title='Automatic Captions'
    )
    subtitles: Optional[Subtitles] = None
    comment_count: Optional[Any] = Field(None, title='Comment Count')
    chapters: Optional[Any] = Field(None, title='Chapters')
    like_count: Optional[int] = Field(None, title='Like Count')
    channel: Optional[str] = Field(None, title='Channel')
    channel_follower_count: Optional[int] = Field(None, title='Channel Follower Count')
    upload_date: Optional[str] = Field(None, title='Upload Date')
    availability: Optional[str] = Field(None, title='Availability')
    original_url: Optional[str] = Field(None, title='Original Url')
    webpage_url_basename: Optional[str] = Field(None, title='Webpage Url Basename')
    webpage_url_domain: Optional[str] = Field(None, title='Webpage Url Domain')
    extractor: Optional[str] = Field(None, title='Extractor')
    extractor_key: Optional[str] = Field(None, title='Extractor Key')
    playlist_count: Optional[int] = Field(None, title='Playlist Count')
    playlist: Optional[str] = Field(None, title='Playlist')
    playlist_id: Optional[str] = Field(None, title='Playlist Id')
    playlist_title: Optional[str] = Field(None, title='Playlist Title')
    playlist_uploader: Optional[Any] = Field(None, title='Playlist Uploader')
    playlist_uploader_id: Optional[Any] = Field(None, title='Playlist Uploader Id')
    n_entries: Optional[int] = Field(None, title='N Entries')
    playlist_index: Optional[int] = Field(None, title='Playlist Index')
    playlist_autonumber: Optional[int] = Field(None, title='Playlist Autonumber')
    display_id: Optional[str] = Field(None, title='Display Id')
    fulltitle: Optional[str] = Field(None, title='Fulltitle')
    duration_string: Optional[str] = Field(None, title='Duration String')
    release_date: Optional[str] = Field(None, title='Release Date')
    requested_subtitles: Optional[Any] = Field(None, title='Requested Subtitles')
    asr: Optional[int] = Field(None, title='Asr')
    filesize: Optional[int] = Field(None, title='Filesize')
    format_id: Optional[str] = Field(None, title='Format Id')
    format_note: Optional[str] = Field(None, title='Format Note')
    source_preference: Optional[int] = Field(None, title='Source Preference')
    fps: Optional[Any] = Field(None, title='Fps')
    audio_channels: Optional[int] = Field(None, title='Audio Channels')
    height: Optional[Any] = Field(None, title='Height')
    quality: Optional[int] = Field(None, title='Quality')
    has_drm: Optional[bool] = Field(None, title='Has Drm')
    tbr: Optional[float] = Field(None, title='Tbr')
    url: Optional[str] = Field(None, title='Url')
    width: Optional[Any] = Field(None, title='Width')
    language: Optional[str] = Field(None, title='Language')
    language_preference: Optional[int] = Field(None, title='Language Preference')
    preference: Optional[Any] = Field(None, title='Preference')
    ext: Optional[str] = Field(None, title='Ext')
    vcodec: Optional[str] = Field(None, title='Vcodec')
    acodec: Optional[str] = Field(None, title='Acodec')
    dynamic_range: Optional[Any] = Field(None, title='Dynamic Range')
    abr: Optional[float] = Field(None, title='Abr')
    downloader_options: Optional[DownloaderOptions1] = None
    container: Optional[str] = Field(None, title='Container')
    protocol: Optional[str] = Field(None, title='Protocol')
    audio_ext: Optional[str] = Field(None, title='Audio Ext')
    video_ext: Optional[str] = Field(None, title='Video Ext')
    format: Optional[str] = Field(None, title='Format')
    resolution: Optional[str] = Field(None, title='Resolution')
    http_headers: Optional[HttpHeaders1] = None


class BioResponse(BaseModel):
    user: BioUser
    profile_data: Optional[ProfileModel] = None
    member: Optional[BioMember] = None
    activities: Optional[List[MelanieActivity]] = Field(None, title='Activities')
    request: Optional[BioRequest] = None
    status: Optional[GatewayUserStatus] = None
    sig: Optional[str] = Field(None, title='Sig')


class DiscordJoinOauthModel(BaseModel):
    bot_name: Optional[str] = Field(None, title='Bot Name')
    what_the_heck_is_this: Optional[str] = Field(
        'Testing out the ability for us to receive data on who invites the bot to a server to make the process of whitelisting and managing servers easier. You can read more about this here --> https://discord.com/developers/docs/topics/oauth2#advanced-bot-authorization. Prettier page coming soon.....',
        title='What The Heck Is This',
    )
    audit_key: Optional[str] = Field(None, title='Audit Key')
    guild_added_in: Optional[str] = Field(None, title='Guild Added In')
    permissions_granted: Optional[str] = Field(None, title='Permissions Granted')
    token_data: Optional[TokenData] = None
    user_data: Optional[UserData] = None


class InstagramPostItem(BaseModel):
    id: Optional[str] = Field(None, title='Id')
    title: Optional[str] = Field(None, title='Title')
    taken_at: Optional[int] = Field(None, title='Taken At')
    comment_count: Optional[int] = Field(None, title='Comment Count')
    is_video: Optional[bool] = Field(False, title='Is Video')
    like_count: Optional[int] = Field(None, title='Like Count')
    view_count: Optional[int] = Field(None, title='View Count')
    sidecars: Optional[List[InstagramCarouselMediaResponse]] = Field(
        [], title='Sidecars'
    )
    sidecar_count: Optional[int] = Field(None, title='Sidecar Count')
    image_url: Optional[str] = Field(None, title='Image Url')
    image_filename: Optional[str] = Field(None, title='Image Filename')
    video_url: Optional[str] = Field(None, title='Video Url')
    video_filename: Optional[str] = Field(None, title='Video Filename')
    video_duration: Optional[float] = Field(None, title='Video Duration')
    has_audio: Optional[bool] = Field(None, title='Has Audio')
    device_timestamp: Optional[int] = Field(None, title='Device Timestamp')
    media_type: Optional[int] = Field(None, title='Media Type')
    filter_type: Optional[int] = Field(None, title='Filter Type')
    location: Optional[Location] = None
    is_paid_partnership: Optional[bool] = Field(None, title='Is Paid Partnership')
    comments: Optional[List[Comment]] = Field(None, title='Comments')
    is_post_live: Optional[bool] = Field(None, title='Is Post Live')
    original_width: Optional[int] = Field(None, title='Original Width')
    original_height: Optional[int] = Field(None, title='Original Height')
    usertags: Optional[Usertags] = None
    mashup_info: Optional[MashupInfo] = None
    caption: Optional[Caption] = None


class InstagramPostResponse(BaseModel):
    num_results: Optional[int] = Field(0, title='Num Results')
    share_url: Optional[str] = Field(None, title='Share Url')
    author: Optional[InstagramUserResponse] = None
    items: Optional[List[InstagramPostItem]] = Field([], title='Items')

    def format(self, text):
        if " thousand" in text:
            text=text.replace(" thousand", "k")
        if " million" in text:
            text=text.replace(" million", "m")
        return text


    def make_embed(self,ctx) -> discord.Embed:
        embed=discord.Embed(description=f"[Post]({self.share_url}) Requested By {ctx.author.mention}",url=f'https://instagram.com/{self.author.username}', color=color).set_author(name=self.author.username, icon_url=self.author.avatar_url)
        embed.set_footer(icon_url="https://www.designpieces.com/wp-content/uploads/2016/05/Instagram-v051916-150x150.png", text="Instagram | Powered by melaniebot")
        return embed

    @classmethod
    async def from_url(cls, session: aiohttp.ClientSession, ctx, url: str):
        async with session.post(f"https://dev.melaniebot.gg/api/instagram/post",json={'content':url,'guild_id':ctx.guild.id,'user_id':ctx.author.id}) as r:
            return cls.parse_raw(await r.read())

class InstagramProfileModelResponse(BaseModel):
    avatar_filename: Optional[str] = Field(None, title='Avatar Filename')
    avatar_url: Optional[str] = Field(
        None,
        description="The user's profile picture and metadata stripped and re-uploaded to help with Instagram api limits. ",
        title='Avatar Url',
    )
    bio_links: Optional[List] = Field(None, title='Bio Links')
    biography: Optional[str] = Field(None, title='Biography')
    external_url: Optional[str] = Field(None, title='External Url')
    fbid: Optional[str] = Field(None, title='Fbid')
    followed_by_count: Optional[int] = Field(None, title='Followed By Count')
    following_count: Optional[int] = Field(None, title='Following Count')
    full_name: Optional[str] = Field(None, title='Full Name')
    has_channel: Optional[bool] = Field(None, title='Has Channel')
    has_clips: Optional[bool] = Field(None, title='Has Clips')
    has_guides: Optional[bool] = Field(None, title='Has Guides')
    highlight_reel_count: Optional[int] = Field(None, title='Highlight Reel Count')
    id: Optional[str] = Field(None, title='Id')
    is_business_account: Optional[bool] = Field(None, title='Is Business Account')
    is_joined_recently: Optional[bool] = Field(None, title='Is Joined Recently')
    is_private: Optional[bool] = Field(None, title='Is Private')
    is_professional_account: Optional[bool] = Field(
        None, title='Is Professional Account'
    )
    is_verified: Optional[bool] = Field(None, title='Is Verified')
    location_transparency_country: Optional[str] = Field(
        None, title='Location Transparency Country'
    )
    post_count: Optional[int] = Field(None, title='Post Count')
    pronouns: Optional[List[str]] = Field(None, title='Pronouns')
    state_controlled_media_country: Optional[str] = Field(
        None, title='State Controlled Media Country'
    )
    transparency_label: Optional[str] = Field(None, title='Transparency Label')
    transparency_product: Optional[str] = Field(None, title='Transparency Product')
    username: Optional[str] = Field(None, title='Username')
    stories: Optional[InstagramStoryResposne] = None


    def format(self, text):
        if " thousand" in text:
            text=text.replace(" thousand", "k")
        if " million" in text:
            text=text.replace(" million", "m")
        return text


    def make_embed(self,ctx) -> discord.Embed:
        badges=[]
        if self.is_verified:
            badges.append("<a:b_verifybluecs:926931019339284561>")
          
        if self.is_private:
            badges.append("🔒")
        if badges:
            add=f" ∙ \u200b{''.join(badges)}"
        else:
            add=""
        embed=discord.Embed(title=f'{self.full_name} (@{self.username})', url=f'https://instagram.com/{self.username}', description=f'{self.biography}', color=color).set_author(name=ctx.author.display_name if ctx.author.nick else str(ctx.author), icon_url=ctx.author.display_avatar)
        embed.set_thumbnail(url=f'{self.avatar_url}')
        embed.add_field(name='Posts', value=f'{self.format(humanize.intword(self.post_count))}', inline=True)
        embed.add_field(name='Followers', value=f'{self.format(humanize.intword(self.followed_by_count))}', inline=True)
        embed.add_field(name='Following', value=f'{self.format(humanize.intword(self.following_count))}', inline=True)
        embed.set_footer(icon_url="https://www.designpieces.com/wp-content/uploads/2016/05/Instagram-v051916-150x150.png", text="Instagram | Powered by melaniebot")
        return embed

    @classmethod
    async def from_url(cls, session: aiohttp.ClientSession, ctx, username: str):
        async with session.get(f"https://dev.melaniebot.gg/api/instagram/{username}") as r:
            return cls.parse_raw(await r.read())


class TikTokVideoResponse(BaseModel):
    video_url: Optional[str] = Field(None, title='Video Url')
    color_data: Optional[ColorLookup] = None
    direct_download_urls: Optional[List[str]] = Field(
        None, title='Direct Download Urls'
    )
    aweme_id: Optional[str] = Field(None, title='Aweme Id')
    digg_count: Optional[int] = Field(None, title='Digg Count')
    play_count: Optional[int] = Field(None, title='Play Count')
    share_count: Optional[int] = Field(None, title='Share Count')
    comment_count: Optional[int] = Field(None, title='Comment Count')
    lose_count: Optional[int] = Field(None, title='Lose Count')
    lose_comment_count: Optional[int] = Field(None, title='Lose Comment Count')
    whatsapp_share_count: Optional[int] = Field(None, title='Whatsapp Share Count')
    collect_count: Optional[int] = Field(None, title='Collect Count')
    download_count: Optional[int] = Field(None, title='Download Count')
    forward_count: Optional[int] = Field(None, title='Forward Count')
    group_id: Optional[str] = Field(None, title='Group Id')
    image_post_info: Optional[ImagePostInfo] = None
    desc_language: Optional[str] = Field(None, title='Desc Language')
    search_highlight: Optional[Any] = Field(None, title='Search Highlight')
    anchors: Optional[Any] = Field(None, title='Anchors')
    playlist_blocked: Optional[bool] = Field(None, title='Playlist Blocked')
    question_list: Optional[Any] = Field(None, title='Question List')
    share_info: Optional[ShareInfo] = None
    long_video: Optional[Any] = Field(None, title='Long Video')
    without_watermark: Optional[bool] = Field(None, title='Without Watermark')
    distribute_type: Optional[int] = Field(None, title='Distribute Type')
    green_screen_materials: Optional[Any] = Field(None, title='Green Screen Materials')
    content_desc: Optional[str] = Field(None, title='Content Desc')
    position: Optional[Any] = Field(None, title='Position')
    is_pgcshow: Optional[bool] = Field(None, title='Is Pgcshow')
    disable_search_trending_bar: Optional[bool] = Field(
        None, title='Disable Search Trending Bar'
    )
    music_begin_time_in_ms: Optional[int] = Field(None, title='Music Begin Time In Ms')
    create_time: Optional[int] = Field(None, title='Create Time')
    author: Optional[Author] = None
    video_labels: Optional[List] = Field(None, title='Video Labels')
    sort_label: Optional[str] = Field(None, title='Sort Label')
    video_text: Optional[List] = Field(None, title='Video Text')
    commerce_config_data: Optional[Any] = Field(None, title='Commerce Config Data')
    item_stitch: Optional[int] = Field(None, title='Item Stitch')
    group_id_list: Optional[GroupIdList] = None
    share_url: Optional[str] = Field(None, title='Share Url')
    nickname_position: Optional[Any] = Field(None, title='Nickname Position')
    misc_info: Optional[str] = Field(None, title='Misc Info')
    video: Optional[Video] = None
    risk_infos: Optional[RiskInfos] = None
    is_relieve: Optional[bool] = Field(None, title='Is Relieve')
    origin_comment_ids: Optional[Any] = Field(None, title='Origin Comment Ids')
    mask_infos: Optional[List] = Field(None, title='Mask Infos')
    distance: Optional[str] = Field(None, title='Distance')
    author_user_id: Optional[int] = Field(None, title='Author User Id')
    region: Optional[str] = Field(None, title='Region')
    user_digged: Optional[int] = Field(None, title='User Digged')
    bodydance_score: Optional[int] = Field(None, title='Bodydance Score')
    collect_stat: Optional[int] = Field(None, title='Collect Stat')
    prevent_download: Optional[bool] = Field(None, title='Prevent Download')
    uniqid_position: Optional[Any] = Field(None, title='Uniqid Position')
    with_promotional_music: Optional[bool] = Field(None, title='With Promotional Music')
    challenge_position: Optional[Any] = Field(None, title='Challenge Position')
    item_react: Optional[int] = Field(None, title='Item React')
    commerce_info: Optional[CommerceInfo] = None
    follow_up_publish_from_id: Optional[int] = Field(
        None, title='Follow Up Publish From Id'
    )
    is_ads: Optional[bool] = Field(None, title='Is Ads')
    cmt_swt: Optional[bool] = Field(None, title='Cmt Swt')
    item_duet: Optional[int] = Field(None, title='Item Duet')
    is_preview: Optional[int] = Field(None, title='Is Preview')
    aweme_type: Optional[int] = Field(None, title='Aweme Type')
    desc: Optional[str] = Field(None, title='Desc')
    rate: Optional[int] = Field(None, title='Rate')
    have_dashboard: Optional[bool] = Field(None, title='Have Dashboard')
    status: Optional[Status] = None
    is_top: Optional[int] = Field(None, title='Is Top')
    is_vr: Optional[bool] = Field(None, title='Is Vr')
    hybrid_label: Optional[Any] = Field(None, title='Hybrid Label')
    products_info: Optional[Any] = Field(None, title='Products Info')
    music: Optional[Music] = None
    image_infos: Optional[Any] = Field(None, title='Image Infos')
    is_hash_tag: Optional[int] = Field(None, title='Is Hash Tag')
    video_control: Optional[VideoControl] = None
    cover_labels: Optional[Any] = Field(None, title='Cover Labels')
    need_trim_step: Optional[bool] = Field(None, title='Need Trim Step')
    music_end_time_in_ms: Optional[int] = Field(None, title='Music End Time In Ms')


class YoutubeSearchResults(BaseModel):
    results: List[MelanieModelsYtDlpSearchSearchResult] = Field(..., title='Results')
